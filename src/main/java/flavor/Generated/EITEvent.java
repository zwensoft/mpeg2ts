/* @flavorc
 *
 * EITEvent.java
 * 
 * This file was automatically generated by flavorc
 * from the source file:
 *     '../FormalDefs/EIT_section.fl'
 *
 * For information on flavorc, visit the Flavor Web site at:
 *     http://flavor.sourceforge.net
 *
 * -- Do not edit by hand --
 *
 */

package flavor.Generated;
import flavor.*;
import java.io.*;

public class EITEvent {
    int reserved1;
    int event_id;
    int start_time;
    int reserved2;
    int ETM_location;
    int length_in_seconds;
    int title_length;
    MultiString title_text;
    int reserved3;
    int descriptors_length;
    int remain_desc_bytes;
    Descriptor descriptor;

    public int get(IBitstream _F_bs) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        int _F_parse = 0;
        Util.trace(_F_bs.getpos(), 0, (int)0, "begin EITEvent");
        _F_parse = 2;
        reserved1 = _F_bs.getbits(_F_parse);
        if (reserved1 != 3) {
            Util.flerror("Const value mismatch for 'reserved1'");
            _F_ret++;
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved1, "reserved1" +  " (" + reserved1 + ") [ERROR]");
        }
        else {
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved1, "reserved1" +  " (" + reserved1 + ")");
        }
        _F_parse = 14;
        event_id = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)event_id, "event_id" +  " (" + event_id + ")");
        _F_parse = 32;
        start_time = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)start_time, "start_time" +  " (" + start_time + ")");
        _F_parse = 2;
        reserved2 = _F_bs.getbits(_F_parse);
        if (reserved2 != 3) {
            Util.flerror("Const value mismatch for 'reserved2'");
            _F_ret++;
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved2, "reserved2" +  " (" + reserved2 + ") [ERROR]");
        }
        else {
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved2, "reserved2" +  " (" + reserved2 + ")");
        }
        _F_parse = 2;
        ETM_location = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)ETM_location, "ETM_location" +  " (" + ETM_location + ")");
        _F_parse = 20;
        length_in_seconds = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)length_in_seconds, "length_in_seconds" +  " (" + length_in_seconds + ")");
        _F_parse = 8;
        title_length = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)title_length, "title_length" +  " (" + title_length + ")");
        Util.trace(_F_bs.getpos(), 0, (int)0, "processing MultipleStringStructure title_text");
        title_text = new MultiString();
        _F_ret += title_text.get(_F_bs);
        _F_parse = 4;
        reserved3 = _F_bs.getbits(_F_parse);
        if (reserved3 != 15) {
            Util.flerror("Const value mismatch for 'reserved3'");
            _F_ret++;
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved3, "reserved3" +  " (" + reserved3 + ") [ERROR]");
        }
        else {
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved3, "reserved3" +  " (" + reserved3 + ")");
        }
        _F_parse = 12;
        descriptors_length = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)descriptors_length, "descriptors_length" +  " (" + descriptors_length + ")");
        remain_desc_bytes = descriptors_length;
        while (remain_desc_bytes>0) {
            Util.trace(_F_bs.getpos(), 0, (int)0, "processing Descriptor descriptor");
            descriptor = new Descriptor();
            _F_ret += descriptor.get(_F_bs);
            remain_desc_bytes-=(descriptor._F_lengthof/8);
            if (1==0) break;
        }
        Util.trace(_F_bs.getpos(), 0, (int)0, "end EITEvent");
        return _F_ret;
    }

    public int put(IBitstream _F_bs) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        int _F_parse = 0;
        _F_parse = 2;
        reserved1 = 3;
        _F_bs.putbits(reserved1, _F_parse);
        _F_bs.putbits(event_id, 14);
        _F_bs.putbits(start_time, 32);
        _F_parse = 2;
        reserved2 = 3;
        _F_bs.putbits(reserved2, _F_parse);
        _F_bs.putbits(ETM_location, 2);
        _F_bs.putbits(length_in_seconds, 20);
        _F_bs.putbits(title_length, 8);
        _F_ret += title_text.put(_F_bs);
        _F_parse = 4;
        reserved3 = 15;
        _F_bs.putbits(reserved3, _F_parse);
        _F_bs.putbits(descriptors_length, 12);
        remain_desc_bytes = descriptors_length;
        while (remain_desc_bytes>0) {
            _F_ret += descriptor.put(_F_bs);
            remain_desc_bytes-=(descriptor._F_lengthof/8);
            if (1==0) break;
        }
        return _F_ret;
    }

    public int putxml(IBitstream _F_bs, boolean bAttr) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        int _F_parse = 0;
        _F_parse = 2;
        reserved1 = _F_bs.getbits(_F_parse);
        if (reserved1 != 3) {
            Util.flerror("Const value mismatch for 'reserved1'");
            _F_ret++;
            if (bAttr) {
                XML.WriteXmlElement("<reserved1 type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + reserved1 + "</reserved1>");
            }
            else {
                XML.WriteXmlElement("<reserved1 bitLen=\"" + _F_parse + "\">" + reserved1 + "</reserved1>");
            }
        }
        else {
            if (bAttr) {
                XML.WriteXmlElement("<reserved1 type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + reserved1 + "</reserved1>");
            }
            else {
                XML.WriteXmlElement("<reserved1 bitLen=\"" + _F_parse + "\">" + reserved1 + "</reserved1>");
            }
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved1, "reserved1" +  " (" + reserved1 + ")");
        }
        _F_parse = 14;
        event_id = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<event_id type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + event_id + "</event_id>");
        }
        else {
            XML.WriteXmlElement("<event_id bitLen=\"" + _F_parse + "\">" + event_id + "</event_id>");
        }
        _F_parse = 32;
        start_time = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<start_time type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + start_time + "</start_time>");
        }
        else {
            XML.WriteXmlElement("<start_time bitLen=\"" + _F_parse + "\">" + start_time + "</start_time>");
        }
        _F_parse = 2;
        reserved2 = _F_bs.getbits(_F_parse);
        if (reserved2 != 3) {
            Util.flerror("Const value mismatch for 'reserved2'");
            _F_ret++;
            if (bAttr) {
                XML.WriteXmlElement("<reserved2 type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + reserved2 + "</reserved2>");
            }
            else {
                XML.WriteXmlElement("<reserved2 bitLen=\"" + _F_parse + "\">" + reserved2 + "</reserved2>");
            }
        }
        else {
            if (bAttr) {
                XML.WriteXmlElement("<reserved2 type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + reserved2 + "</reserved2>");
            }
            else {
                XML.WriteXmlElement("<reserved2 bitLen=\"" + _F_parse + "\">" + reserved2 + "</reserved2>");
            }
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved2, "reserved2" +  " (" + reserved2 + ")");
        }
        _F_parse = 2;
        ETM_location = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<ETM_location type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + ETM_location + "</ETM_location>");
        }
        else {
            XML.WriteXmlElement("<ETM_location bitLen=\"" + _F_parse + "\">" + ETM_location + "</ETM_location>");
        }
        _F_parse = 20;
        length_in_seconds = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<length_in_seconds type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + length_in_seconds + "</length_in_seconds>");
        }
        else {
            XML.WriteXmlElement("<length_in_seconds bitLen=\"" + _F_parse + "\">" + length_in_seconds + "</length_in_seconds>");
        }
        _F_parse = 8;
        title_length = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<title_length type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + title_length + "</title_length>");
        }
        else {
            XML.WriteXmlElement("<title_length bitLen=\"" + _F_parse + "\">" + title_length + "</title_length>");
        }
        Util.trace(_F_bs.getpos(), 0, (int)0, "processing MultipleStringStructure title_text");
        title_text = new MultiString();
        XML.IntoAClass("title_text", 0);
        _F_ret += title_text.putxml(_F_bs, bAttr);
        XML.OutOfClass("</title_text>");
        _F_parse = 4;
        reserved3 = _F_bs.getbits(_F_parse);
        if (reserved3 != 15) {
            Util.flerror("Const value mismatch for 'reserved3'");
            _F_ret++;
            if (bAttr) {
                XML.WriteXmlElement("<reserved3 type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + reserved3 + "</reserved3>");
            }
            else {
                XML.WriteXmlElement("<reserved3 bitLen=\"" + _F_parse + "\">" + reserved3 + "</reserved3>");
            }
        }
        else {
            if (bAttr) {
                XML.WriteXmlElement("<reserved3 type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + reserved3 + "</reserved3>");
            }
            else {
                XML.WriteXmlElement("<reserved3 bitLen=\"" + _F_parse + "\">" + reserved3 + "</reserved3>");
            }
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved3, "reserved3" +  " (" + reserved3 + ")");
        }
        _F_parse = 12;
        descriptors_length = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<descriptors_length type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + descriptors_length + "</descriptors_length>");
        }
        else {
            XML.WriteXmlElement("<descriptors_length bitLen=\"" + _F_parse + "\">" + descriptors_length + "</descriptors_length>");
        }
        remain_desc_bytes = descriptors_length;
        while (remain_desc_bytes>0) {
            Util.trace(_F_bs.getpos(), 0, (int)0, "processing Descriptor descriptor");
            descriptor = new Descriptor();
            XML.IntoAClass("descriptor", 0);
            _F_ret += descriptor.putxml(_F_bs, bAttr);
            XML.OutOfClass("</descriptor>");
            remain_desc_bytes-=(descriptor._F_lengthof/8);
            if (1==0) break;
        }
        return _F_ret;
    }
}
