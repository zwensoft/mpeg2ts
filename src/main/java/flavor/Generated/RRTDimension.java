/* @flavorc
 *
 * RRTDimension.java
 * 
 * This file was automatically generated by flavorc
 * from the source file:
 *     '../FormalDefs/RRT_section.fl'
 *
 * For information on flavorc, visit the Flavor Web site at:
 *     http://flavor.sourceforge.net
 *
 * -- Do not edit by hand --
 *
 */

package flavor.Generated;
import flavor.*;
import java.io.*;

public class RRTDimension {
    int dimension_name_length;
    MultiString dimension_name_text;
    int reserved;
    int graduated_scale;
    int values_defined;
    int nval;
    RRTDimensionValue value;

    public int get(IBitstream _F_bs) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        int _F_parse = 0;
        Util.trace(_F_bs.getpos(), 0, (int)0, "begin RRTDimension");
        _F_parse = 8;
        dimension_name_length = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)dimension_name_length, "dimension_name_length" +  " (" + dimension_name_length + ")");
        Util.trace(_F_bs.getpos(), 0, (int)0, "processing MultipleStringStructure dimension_name_text");
        dimension_name_text = new MultiString();
        _F_ret += dimension_name_text.get(_F_bs);
        _F_parse = 3;
        reserved = _F_bs.getbits(_F_parse);
        if (reserved != 7) {
            Util.flerror("Const value mismatch for 'reserved'");
            _F_ret++;
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved, "reserved" +  " (" + reserved + ") [ERROR]");
        }
        else {
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved, "reserved" +  " (" + reserved + ")");
        }
        _F_parse = 1;
        graduated_scale = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)graduated_scale, "graduated_scale" +  " (" + graduated_scale + ")");
        _F_parse = 4;
        values_defined = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)values_defined, "values_defined" +  " (" + values_defined + ")");
        for (nval=0; nval<values_defined; nval++) {
            Util.trace(_F_bs.getpos(), 0, (int)0, "processing RRTDimensionValue value");
            value = new RRTDimensionValue();
            _F_ret += value.get(_F_bs);
            if (1==0) break;
        }
        Util.trace(_F_bs.getpos(), 0, (int)0, "end RRTDimension");
        return _F_ret;
    }

    public int put(IBitstream _F_bs) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        int _F_parse = 0;
        _F_bs.putbits(dimension_name_length, 8);
        _F_ret += dimension_name_text.put(_F_bs);
        _F_parse = 3;
        reserved = 7;
        _F_bs.putbits(reserved, _F_parse);
        _F_bs.putbits(graduated_scale, 1);
        _F_bs.putbits(values_defined, 4);
        for (nval=0; nval<values_defined; nval++) {
            _F_ret += value.put(_F_bs);
            if (1==0) break;
        }
        return _F_ret;
    }

    public int putxml(IBitstream _F_bs, boolean bAttr) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        int _F_parse = 0;
        _F_parse = 8;
        dimension_name_length = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<dimension_name_length type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + dimension_name_length + "</dimension_name_length>");
        }
        else {
            XML.WriteXmlElement("<dimension_name_length bitLen=\"" + _F_parse + "\">" + dimension_name_length + "</dimension_name_length>");
        }
        Util.trace(_F_bs.getpos(), 0, (int)0, "processing MultipleStringStructure dimension_name_text");
        dimension_name_text = new MultiString();
        XML.IntoAClass("dimension_name_text", 0);
        _F_ret += dimension_name_text.putxml(_F_bs, bAttr);
        XML.OutOfClass("</dimension_name_text>");
        _F_parse = 3;
        reserved = _F_bs.getbits(_F_parse);
        if (reserved != 7) {
            Util.flerror("Const value mismatch for 'reserved'");
            _F_ret++;
            if (bAttr) {
                XML.WriteXmlElement("<reserved type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + reserved + "</reserved>");
            }
            else {
                XML.WriteXmlElement("<reserved bitLen=\"" + _F_parse + "\">" + reserved + "</reserved>");
            }
        }
        else {
            if (bAttr) {
                XML.WriteXmlElement("<reserved type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + reserved + "</reserved>");
            }
            else {
                XML.WriteXmlElement("<reserved bitLen=\"" + _F_parse + "\">" + reserved + "</reserved>");
            }
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved, "reserved" +  " (" + reserved + ")");
        }
        _F_parse = 1;
        graduated_scale = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<graduated_scale type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + graduated_scale + "</graduated_scale>");
        }
        else {
            XML.WriteXmlElement("<graduated_scale bitLen=\"" + _F_parse + "\">" + graduated_scale + "</graduated_scale>");
        }
        _F_parse = 4;
        values_defined = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<values_defined type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + values_defined + "</values_defined>");
        }
        else {
            XML.WriteXmlElement("<values_defined bitLen=\"" + _F_parse + "\">" + values_defined + "</values_defined>");
        }
        for (nval=0; nval<values_defined; nval++) {
            Util.trace(_F_bs.getpos(), 0, (int)0, "processing RRTDimensionValue value");
            value = new RRTDimensionValue();
            XML.IntoAClass("value", 0);
            _F_ret += value.putxml(_F_bs, bAttr);
            XML.OutOfClass("</value>");
            if (1==0) break;
        }
        return _F_ret;
    }
}
