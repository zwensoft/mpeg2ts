/* @flavorc
 *
 * EIT.java
 * 
 * This file was automatically generated by flavorc
 * from the source file:
 *     '../FormalDefs/EIT_section.fl'
 *
 * For information on flavorc, visit the Flavor Web site at:
 *     http://flavor.sourceforge.net
 *
 * -- Do not edit by hand --
 *
 */

package flavor.generated;
import flavor.*;
import java.io.*;

public class EIT {
    int table_id;
    int section_syntax_indicator;
    int private_indicator;
    int reserved1;
    int section_length;
    int source_id;
    int reserved2;
    int version_number;
    int current_next_indicator;
    int section_number;
    int last_section_number;
    int protocol_version;
    int num_events_in_section;
    int en;
    EITEvent event;
    int CRC_32;

    public int get(IBitstream _F_bs) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        int _F_parse = 0;
        Util.trace(_F_bs.getpos(), 0, (int)0, "begin EIT");
        _F_parse = 8;
        table_id = _F_bs.getbits(_F_parse);
        if (table_id != 203) {
            Util.flerror("Const value mismatch for 'table_id'");
            _F_ret++;
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)table_id, "table_id" +  " (" + table_id + ") [ERROR]");
        }
        else {
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)table_id, "table_id" +  " (" + table_id + ")");
        }
        _F_parse = 1;
        section_syntax_indicator = _F_bs.getbits(_F_parse);
        if (section_syntax_indicator != 1) {
            Util.flerror("Const value mismatch for 'section_syntax_indicator'");
            _F_ret++;
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)section_syntax_indicator, "section_syntax_indicator" +  " (" + section_syntax_indicator + ") [ERROR]");
        }
        else {
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)section_syntax_indicator, "section_syntax_indicator" +  " (" + section_syntax_indicator + ")");
        }
        _F_parse = 1;
        private_indicator = _F_bs.getbits(_F_parse);
        if (private_indicator != 1) {
            Util.flerror("Const value mismatch for 'private_indicator'");
            _F_ret++;
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)private_indicator, "private_indicator" +  " (" + private_indicator + ") [ERROR]");
        }
        else {
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)private_indicator, "private_indicator" +  " (" + private_indicator + ")");
        }
        _F_parse = 2;
        reserved1 = _F_bs.getbits(_F_parse);
        if (reserved1 != 3) {
            Util.flerror("Const value mismatch for 'reserved1'");
            _F_ret++;
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved1, "reserved1" +  " (" + reserved1 + ") [ERROR]");
        }
        else {
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved1, "reserved1" +  " (" + reserved1 + ")");
        }
        _F_parse = 12;
        section_length = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)section_length, "section_length" +  " (" + section_length + ")");
        _F_parse = 16;
        source_id = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)source_id, "source_id" +  " (" + source_id + ")");
        _F_parse = 2;
        reserved2 = _F_bs.getbits(_F_parse);
        if (reserved2 != 3) {
            Util.flerror("Const value mismatch for 'reserved2'");
            _F_ret++;
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved2, "reserved2" +  " (" + reserved2 + ") [ERROR]");
        }
        else {
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved2, "reserved2" +  " (" + reserved2 + ")");
        }
        _F_parse = 5;
        version_number = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)version_number, "version_number" +  " (" + version_number + ")");
        _F_parse = 1;
        current_next_indicator = _F_bs.getbits(_F_parse);
        if (current_next_indicator != 1) {
            Util.flerror("Const value mismatch for 'current_next_indicator'");
            _F_ret++;
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)current_next_indicator, "current_next_indicator" +  " (" + current_next_indicator + ") [ERROR]");
        }
        else {
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)current_next_indicator, "current_next_indicator" +  " (" + current_next_indicator + ")");
        }
        _F_parse = 8;
        section_number = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)section_number, "section_number" +  " (" + section_number + ")");
        _F_parse = 8;
        last_section_number = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)last_section_number, "last_section_number" +  " (" + last_section_number + ")");
        _F_parse = 8;
        protocol_version = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)protocol_version, "protocol_version" +  " (" + protocol_version + ")");
        _F_parse = 8;
        num_events_in_section = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)num_events_in_section, "num_events_in_section" +  " (" + num_events_in_section + ")");
        for (en=0; en<num_events_in_section; en++) {
            Util.trace(_F_bs.getpos(), 0, (int)0, "processing EITEvent event");
            event = new EITEvent();
            _F_ret += event.get(_F_bs);
            if (1==0) break;
        }
        _F_parse = 32;
        CRC_32 = _F_bs.getbits(_F_parse);
        Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)CRC_32, "CRC_32" +  " (" + CRC_32 + ")");
        Util.trace(_F_bs.getpos(), 0, (int)0, "end EIT");
        return _F_ret;
    }

    public int put(IBitstream _F_bs) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        int _F_parse = 0;
        _F_parse = 8;
        table_id = 203;
        _F_bs.putbits(table_id, _F_parse);
        _F_parse = 1;
        section_syntax_indicator = 1;
        _F_bs.putbits(section_syntax_indicator, _F_parse);
        _F_parse = 1;
        private_indicator = 1;
        _F_bs.putbits(private_indicator, _F_parse);
        _F_parse = 2;
        reserved1 = 3;
        _F_bs.putbits(reserved1, _F_parse);
        _F_bs.putbits(section_length, 12);
        _F_bs.putbits(source_id, 16);
        _F_parse = 2;
        reserved2 = 3;
        _F_bs.putbits(reserved2, _F_parse);
        _F_bs.putbits(version_number, 5);
        _F_parse = 1;
        current_next_indicator = 1;
        _F_bs.putbits(current_next_indicator, _F_parse);
        _F_bs.putbits(section_number, 8);
        _F_bs.putbits(last_section_number, 8);
        _F_bs.putbits(protocol_version, 8);
        _F_bs.putbits(num_events_in_section, 8);
        for (en=0; en<num_events_in_section; en++) {
            _F_ret += event.put(_F_bs);
            if (1==0) break;
        }
        _F_bs.putbits(CRC_32, 32);
        return _F_ret;
    }

    public int putxml(IBitstream _F_bs, boolean bAttr) throws IOException {
        int _F_ret = 0;
        MapResult _F_mr;
        int _F_parse = 0;
        _F_parse = 8;
        table_id = _F_bs.getbits(_F_parse);
        if (table_id != 203) {
            Util.flerror("Const value mismatch for 'table_id'");
            _F_ret++;
            if (bAttr) {
                XML.WriteXmlElement("<table_id type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + table_id + "</table_id>");
            }
            else {
                XML.WriteXmlElement("<table_id bitLen=\"" + _F_parse + "\">" + table_id + "</table_id>");
            }
        }
        else {
            if (bAttr) {
                XML.WriteXmlElement("<table_id type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + table_id + "</table_id>");
            }
            else {
                XML.WriteXmlElement("<table_id bitLen=\"" + _F_parse + "\">" + table_id + "</table_id>");
            }
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)table_id, "table_id" +  " (" + table_id + ")");
        }
        _F_parse = 1;
        section_syntax_indicator = _F_bs.getbits(_F_parse);
        if (section_syntax_indicator != 1) {
            Util.flerror("Const value mismatch for 'section_syntax_indicator'");
            _F_ret++;
            if (bAttr) {
                XML.WriteXmlElement("<section_syntax_indicator type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + section_syntax_indicator + "</section_syntax_indicator>");
            }
            else {
                XML.WriteXmlElement("<section_syntax_indicator bitLen=\"" + _F_parse + "\">" + section_syntax_indicator + "</section_syntax_indicator>");
            }
        }
        else {
            if (bAttr) {
                XML.WriteXmlElement("<section_syntax_indicator type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + section_syntax_indicator + "</section_syntax_indicator>");
            }
            else {
                XML.WriteXmlElement("<section_syntax_indicator bitLen=\"" + _F_parse + "\">" + section_syntax_indicator + "</section_syntax_indicator>");
            }
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)section_syntax_indicator, "section_syntax_indicator" +  " (" + section_syntax_indicator + ")");
        }
        _F_parse = 1;
        private_indicator = _F_bs.getbits(_F_parse);
        if (private_indicator != 1) {
            Util.flerror("Const value mismatch for 'private_indicator'");
            _F_ret++;
            if (bAttr) {
                XML.WriteXmlElement("<private_indicator type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + private_indicator + "</private_indicator>");
            }
            else {
                XML.WriteXmlElement("<private_indicator bitLen=\"" + _F_parse + "\">" + private_indicator + "</private_indicator>");
            }
        }
        else {
            if (bAttr) {
                XML.WriteXmlElement("<private_indicator type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + private_indicator + "</private_indicator>");
            }
            else {
                XML.WriteXmlElement("<private_indicator bitLen=\"" + _F_parse + "\">" + private_indicator + "</private_indicator>");
            }
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)private_indicator, "private_indicator" +  " (" + private_indicator + ")");
        }
        _F_parse = 2;
        reserved1 = _F_bs.getbits(_F_parse);
        if (reserved1 != 3) {
            Util.flerror("Const value mismatch for 'reserved1'");
            _F_ret++;
            if (bAttr) {
                XML.WriteXmlElement("<reserved1 type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + reserved1 + "</reserved1>");
            }
            else {
                XML.WriteXmlElement("<reserved1 bitLen=\"" + _F_parse + "\">" + reserved1 + "</reserved1>");
            }
        }
        else {
            if (bAttr) {
                XML.WriteXmlElement("<reserved1 type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + reserved1 + "</reserved1>");
            }
            else {
                XML.WriteXmlElement("<reserved1 bitLen=\"" + _F_parse + "\">" + reserved1 + "</reserved1>");
            }
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved1, "reserved1" +  " (" + reserved1 + ")");
        }
        _F_parse = 12;
        section_length = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<section_length type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + section_length + "</section_length>");
        }
        else {
            XML.WriteXmlElement("<section_length bitLen=\"" + _F_parse + "\">" + section_length + "</section_length>");
        }
        _F_parse = 16;
        source_id = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<source_id type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + source_id + "</source_id>");
        }
        else {
            XML.WriteXmlElement("<source_id bitLen=\"" + _F_parse + "\">" + source_id + "</source_id>");
        }
        _F_parse = 2;
        reserved2 = _F_bs.getbits(_F_parse);
        if (reserved2 != 3) {
            Util.flerror("Const value mismatch for 'reserved2'");
            _F_ret++;
            if (bAttr) {
                XML.WriteXmlElement("<reserved2 type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + reserved2 + "</reserved2>");
            }
            else {
                XML.WriteXmlElement("<reserved2 bitLen=\"" + _F_parse + "\">" + reserved2 + "</reserved2>");
            }
        }
        else {
            if (bAttr) {
                XML.WriteXmlElement("<reserved2 type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + reserved2 + "</reserved2>");
            }
            else {
                XML.WriteXmlElement("<reserved2 bitLen=\"" + _F_parse + "\">" + reserved2 + "</reserved2>");
            }
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)reserved2, "reserved2" +  " (" + reserved2 + ")");
        }
        _F_parse = 5;
        version_number = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<version_number type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + version_number + "</version_number>");
        }
        else {
            XML.WriteXmlElement("<version_number bitLen=\"" + _F_parse + "\">" + version_number + "</version_number>");
        }
        _F_parse = 1;
        current_next_indicator = _F_bs.getbits(_F_parse);
        if (current_next_indicator != 1) {
            Util.flerror("Const value mismatch for 'current_next_indicator'");
            _F_ret++;
            if (bAttr) {
                XML.WriteXmlElement("<current_next_indicator type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + current_next_indicator + "</current_next_indicator>");
            }
            else {
                XML.WriteXmlElement("<current_next_indicator bitLen=\"" + _F_parse + "\">" + current_next_indicator + "</current_next_indicator>");
            }
        }
        else {
            if (bAttr) {
                XML.WriteXmlElement("<current_next_indicator type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + current_next_indicator + "</current_next_indicator>");
            }
            else {
                XML.WriteXmlElement("<current_next_indicator bitLen=\"" + _F_parse + "\">" + current_next_indicator + "</current_next_indicator>");
            }
            Util.trace(_F_bs.getpos()-_F_parse, _F_parse, (int)current_next_indicator, "current_next_indicator" +  " (" + current_next_indicator + ")");
        }
        _F_parse = 8;
        section_number = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<section_number type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + section_number + "</section_number>");
        }
        else {
            XML.WriteXmlElement("<section_number bitLen=\"" + _F_parse + "\">" + section_number + "</section_number>");
        }
        _F_parse = 8;
        last_section_number = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<last_section_number type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + last_section_number + "</last_section_number>");
        }
        else {
            XML.WriteXmlElement("<last_section_number bitLen=\"" + _F_parse + "\">" + last_section_number + "</last_section_number>");
        }
        _F_parse = 8;
        protocol_version = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<protocol_version type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + protocol_version + "</protocol_version>");
        }
        else {
            XML.WriteXmlElement("<protocol_version bitLen=\"" + _F_parse + "\">" + protocol_version + "</protocol_version>");
        }
        _F_parse = 8;
        num_events_in_section = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<num_events_in_section type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + num_events_in_section + "</num_events_in_section>");
        }
        else {
            XML.WriteXmlElement("<num_events_in_section bitLen=\"" + _F_parse + "\">" + num_events_in_section + "</num_events_in_section>");
        }
        for (en=0; en<num_events_in_section; en++) {
            Util.trace(_F_bs.getpos(), 0, (int)0, "processing EITEvent event");
            event = new EITEvent();
            XML.IntoAClass("event", 0);
            _F_ret += event.putxml(_F_bs, bAttr);
            XML.OutOfClass("</event>");
            if (1==0) break;
        }
        _F_parse = 32;
        CRC_32 = _F_bs.getbits(_F_parse);
        if (bAttr) {
            XML.WriteXmlElement("<CRC_32 type=\"flUInt\" bitLen=\"" + _F_parse + "\">" + CRC_32 + "</CRC_32>");
        }
        else {
            XML.WriteXmlElement("<CRC_32 bitLen=\"" + _F_parse + "\">" + CRC_32 + "</CRC_32>");
        }
        return _F_ret;
    }
}
